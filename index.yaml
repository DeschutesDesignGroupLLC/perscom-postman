openapi: 3.0.3
info:
  title: 'PERSCOM Personnel Management System'
  description: 'The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.'
  contact:
    name: 'Deschutes Design Group LLC'
    url: www.deschutesdesigngroup.com
    email: info@deschutesdesigngroup.com
  version: 1.0.0
servers:
  -
    url: 'http://api.localhost'
    description: 'Local Environment'
  -
    url: 'https://api.staging.perscom.io'
    description: 'Staging Environment'
  -
    url: 'https://api.perscom.io'
    description: 'Production Environment'
security:
  -
    ApiKey: []
  -
    PerscomId: []
paths:
  /v1/me:
    get:
      parameters: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of users'
      tags:
        - Me
  /v1/announcements:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnnouncementResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create announcement'
      tags:
        - Announcements
    get:
      parameters: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnnouncementResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of announcements'
      tags:
        - Announcements
  /v1/announcements/search:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - title
                          - created_at
                          - expires_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, title, created_at, expires_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: title'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnnouncementResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for announcements'
      tags:
        - Announcements
  '/v1/announcements/{announcement}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: announcement
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnnouncementResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get announcement'
      tags:
        - Announcements
    patch:
      parameters:
        -
          schema:
            type: integer
          name: announcement
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnnouncementResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update announcement'
      tags:
        - Announcements
    delete:
      parameters:
        -
          schema:
            type: integer
          name: announcement
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnnouncementResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete announcement'
      tags:
        - Announcements
  /v1/announcements/batch:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Announcement'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnnouncementResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of announcements'
      tags:
        - Announcements
    patch:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Announcement'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnnouncementResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of announcements'
      tags:
        - Announcements
    delete:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnnouncementResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of announcements'
      tags:
        - Announcements
  /v1/awards:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Award'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create award'
      tags:
        - Awards
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of awards'
      tags:
        - Awards
  /v1/awards/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - image
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for awards'
      tags:
        - Awards
  '/v1/awards/{award}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get award'
      tags:
        - Awards
    patch:
      parameters:
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Award'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update award'
      tags:
        - Awards
    delete:
      parameters:
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete award'
      tags:
        - Awards
  /v1/awards/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Award'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of awards'
      tags:
        - Awards
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Award'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of awards'
      tags:
        - Awards
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of awards'
      tags:
        - Awards
  /v1/qualifications:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Qualification'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create qualification'
      tags:
        - Qualifications
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of qualifications'
      tags:
        - Qualifications
  /v1/qualifications/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - image
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for qualifications'
      tags:
        - Qualifications
  '/v1/qualifications/{qualification}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get qualification'
      tags:
        - Qualifications
    patch:
      parameters:
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Qualification'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update qualification'
      tags:
        - Qualifications
    delete:
      parameters:
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete qualification'
      tags:
        - Qualifications
  /v1/qualifications/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Qualification'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of qualifications'
      tags:
        - Qualifications
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Qualification'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of qualifications'
      tags:
        - Qualifications
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of qualifications'
      tags:
        - Qualifications
  /v1/ranks:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rank'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create rank'
      tags:
        - Ranks
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of ranks'
      tags:
        - Ranks
  /v1/ranks/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - image
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for ranks'
      tags:
        - Ranks
  '/v1/ranks/{rank}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get rank'
      tags:
        - Ranks
    patch:
      parameters:
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update rank'
      tags:
        - Ranks
    delete:
      parameters:
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete rank'
      tags:
        - Ranks
  /v1/ranks/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of ranks'
      tags:
        - Ranks
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of ranks'
      tags:
        - Ranks
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of ranks'
      tags:
        - Ranks
  /v1/roster:
    get:
      parameters: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of units'
      tags:
        - Roster
  /v1/submissions:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create submission'
      tags:
        - Submissions
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of submissions'
      tags:
        - Submissions
  /v1/submissions/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - form_id
                          - user_id
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, form_id, user_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: form_id, user_id'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - form
                          - user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for submissions'
      tags:
        - Submissions
  '/v1/submissions/{submission}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: submission
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get submission'
      tags:
        - Submissions
    patch:
      parameters:
        -
          schema:
            type: integer
          name: submission
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update submission'
      tags:
        - Submissions
    delete:
      parameters:
        -
          schema:
            type: integer
          name: submission
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete submission'
      tags:
        - Submissions
  /v1/submissions/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Submission'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of submissions'
      tags:
        - Submissions
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Submission'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of submissions'
      tags:
        - Submissions
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of submissions'
      tags:
        - Submissions
  /v1/units:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - position
              - rank
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create unit'
      tags:
        - Units
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - position
              - rank
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of units'
      tags:
        - Units
  /v1/units/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - position
              - rank
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - position
                          - rank
                          - specialty
                          - status
                          - unit
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for units'
      tags:
        - Units
  '/v1/units/{unit}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - rank
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get unit'
      tags:
        - Units
    patch:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - rank
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update unit'
      tags:
        - Units
    delete:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - rank
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete unit'
      tags:
        - Units
  /v1/units/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - position
              - rank
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of units'
      tags:
        - Units
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - position
              - rank
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of units'
      tags:
        - Units
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - position
              - rank
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of units'
      tags:
        - Units
  '/v1/units/{unit}/users':
    post:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create user'
      tags:
        - 'Units Users'
    get:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of users'
      tags:
        - 'Units Users'
  '/v1/units/{unit}/users/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for users'
      tags:
        - 'Units Users'
  '/v1/units/{unit}/users/{user}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get user'
      tags:
        - 'Units Users'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update user'
      tags:
        - 'Units Users'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete user'
      tags:
        - 'Units Users'
  '/v1/units/{unit}/users/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of users'
      tags:
        - 'Units Users'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of users'
      tags:
        - 'Units Users'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of users'
      tags:
        - 'Units Users'
  '/v1/units/{unit}/users/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate user with unit'
      tags:
        - 'Units Users'
  '/v1/units/{unit}/users/{user}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate user from unit'
      tags:
        - 'Units Users'
  /v1/users:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create user'
      tags:
        - Users
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of users'
      tags:
        - Users
  /v1/users/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - position_id
                          - rank_id
                          - specialty_id
                          - status_id
                          - unit_id
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, position_id, rank_id, specialty_id, status_id, unit_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name, email'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - assignment_records
                          - award_records
                          - combat_records
                          - position
                          - qualification_records
                          - rank
                          - rank_records
                          - service_records
                          - specialty
                          - status
                          - unit
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for users'
      tags:
        - Users
  '/v1/users/{user}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get user'
      tags:
        - Users
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update user'
      tags:
        - Users
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete user'
      tags:
        - Users
  /v1/users/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of users'
      tags:
        - Users
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of users'
      tags:
        - Users
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of users'
      tags:
        - Users
  '/v1/users/{user}/assignment-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - specialty
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records assignment'
      tags:
        - 'Users Assignment Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - specialty
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records assignments'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/assignment-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - specialty
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - position
                          - specialty
                          - unit
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records assignments'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/assignment-records/{assignment_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: assignment_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - specialty
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records assignment'
      tags:
        - 'Users Assignment Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: assignment_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - specialty
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records assignment'
      tags:
        - 'Users Assignment Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: assignment_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - specialty
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records assignment'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/assignment-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - specialty
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/AssignmentRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records assignments'
      tags:
        - 'Users Assignment Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - specialty
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/AssignmentRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records assignments'
      tags:
        - 'Users Assignment Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - specialty
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records assignments'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/assignment-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - specialty
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records assignment with user'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/assignment-records/{assignment_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: assignment_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - position
              - specialty
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records assignment from user'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/award-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - award
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwardRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records award'
      tags:
        - 'Users Award Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - award
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records awards'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/award-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - award
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - award
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records awards'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/award-records/{award_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: award_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - award
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records award'
      tags:
        - 'Users Award Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: award_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - award
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwardRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records award'
      tags:
        - 'Users Award Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: award_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - award
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records award'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/award-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - award
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/AwardRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records awards'
      tags:
        - 'Users Award Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - award
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/AwardRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records awards'
      tags:
        - 'Users Award Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - award
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records awards'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/award-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - award
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records award with user'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/award-records/{award_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: award_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - award
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records award from user'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/combat-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombatRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records combat'
      tags:
        - 'Users Combat Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records combat'
      tags:
        - 'Users Combat Records'
  '/v1/users/{user}/combat-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records combat'
      tags:
        - 'Users Combat Records'
  '/v1/users/{user}/combat-records/{combat_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: combat_record
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records combat'
      tags:
        - 'Users Combat Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: combat_record
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombatRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records combat'
      tags:
        - 'Users Combat Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: combat_record
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records combat'
      tags:
        - 'Users Combat Records'
  '/v1/users/{user}/combat-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/CombatRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records combat'
      tags:
        - 'Users Combat Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/CombatRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records combat'
      tags:
        - 'Users Combat Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records combat'
      tags:
        - 'Users Combat Records'
  '/v1/users/{user}/combat-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records combat with user'
      tags:
        - 'Users Combat Records'
  '/v1/users/{user}/combat-records/{combat_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: combat_record
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records combat from user'
      tags:
        - 'Users Combat Records'
  '/v1/users/{user}/qualification-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - qualification
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QualificationRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records qualification'
      tags:
        - 'Users Qualification Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - qualification
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records qualifications'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/qualification-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - qualification
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - qualification
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records qualifications'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/qualification-records/{qualification_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - qualification
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records qualification'
      tags:
        - 'Users Qualification Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - qualification
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QualificationRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records qualification'
      tags:
        - 'Users Qualification Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - qualification
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records qualification'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/qualification-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - qualification
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/QualificationRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records qualifications'
      tags:
        - 'Users Qualification Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - qualification
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/QualificationRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records qualifications'
      tags:
        - 'Users Qualification Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - qualification
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records qualifications'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/qualification-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - qualification
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records qualification with user'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/qualification-records/{qualification_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - qualification
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records qualification from user'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/rank-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - rank
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RankRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records rank'
      tags:
        - 'Users Rank Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - rank
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records ranks'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/rank-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - rank
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - rank
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records ranks'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/rank-records/{rank_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - rank
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records rank'
      tags:
        - 'Users Rank Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - rank
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RankRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records rank'
      tags:
        - 'Users Rank Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - rank
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records rank'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/rank-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - rank
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/RankRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records ranks'
      tags:
        - 'Users Rank Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - rank
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/RankRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records ranks'
      tags:
        - 'Users Rank Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - rank
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records ranks'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/rank-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - rank
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records rank with user'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/rank-records/{rank_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - rank
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records rank from user'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/service-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records service'
      tags:
        - 'Users Service Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records service'
      tags:
        - 'Users Service Records'
  '/v1/users/{user}/service-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records service'
      tags:
        - 'Users Service Records'
  '/v1/users/{user}/service-records/{service_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: service_record
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records service'
      tags:
        - 'Users Service Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: service_record
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records service'
      tags:
        - 'Users Service Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: service_record
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records service'
      tags:
        - 'Users Service Records'
  '/v1/users/{user}/service-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/ServiceRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records service'
      tags:
        - 'Users Service Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/ServiceRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records service'
      tags:
        - 'Users Service Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records service'
      tags:
        - 'Users Service Records'
  '/v1/users/{user}/service-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records service with user'
      tags:
        - 'Users Service Records'
  '/v1/users/{user}/service-records/{service_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: service_record
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records service from user'
      tags:
        - 'Users Service Records'
  '/v1/users/{user}/position':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Position'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create position'
      tags:
        - 'Users Position'
  '/v1/users/{user}/position/{position}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: position
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get position'
      tags:
        - 'Users Position'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: position
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Position'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update position'
      tags:
        - 'Users Position'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: position
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete position'
      tags:
        - 'Users Position'
  '/v1/users/{user}/rank':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rank'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create rank'
      tags:
        - 'Users Rank'
  '/v1/users/{user}/rank/{rank}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get rank'
      tags:
        - 'Users Rank'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update rank'
      tags:
        - 'Users Rank'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete rank'
      tags:
        - 'Users Rank'
  '/v1/users/{user}/specialty':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create specialty'
      tags:
        - 'Users Specialty'
  '/v1/users/{user}/specialty/{specialty}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: specialty
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get specialty'
      tags:
        - 'Users Specialty'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: specialty
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update specialty'
      tags:
        - 'Users Specialty'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: specialty
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete specialty'
      tags:
        - 'Users Specialty'
  '/v1/users/{user}/status':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create status'
      tags:
        - 'Users Status'
  '/v1/users/{user}/status/{status}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: status
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get status'
      tags:
        - 'Users Status'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: status
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update status'
      tags:
        - 'Users Status'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: status
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete status'
      tags:
        - 'Users Status'
  '/v1/users/{user}/unit/{unit}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get unit'
      tags:
        - 'Users Unit'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update unit'
      tags:
        - 'Users Unit'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete unit'
      tags:
        - 'Users Unit'
  '/v1/users/{user}/unit/batch':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of units'
      tags:
        - 'Users Unit'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of units'
      tags:
        - 'Users Unit'
components:
  securitySchemes:
    ApiKey:
      type: http
      scheme: bearer
    PerscomId:
      type: apiKey
      in: header
      name: 'X-Perscom-Id'
  schemas:
    User:
      title: User
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        email_verified_at:
          type: string
          nullable: true
          format: date-time
        position_id:
          type: integer
          nullable: true
        rank_id:
          type: integer
          nullable: true
        specialty_id:
          type: integer
          nullable: true
        status_id:
          type: integer
          nullable: true
        unit_id:
          type: integer
          nullable: true
        password:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        notes_updated_at:
          type: string
          nullable: true
          format: date-time
        profile_photo:
          type: string
          nullable: true
        cover_photo:
          type: string
          nullable: true
        social_id:
          type: string
          nullable: true
        social_driver:
          type: string
          nullable: true
        social_token:
          type: string
          nullable: true
        social_refresh_token:
          type: string
          nullable: true
        last_seen_at:
          type: string
          nullable: true
          format: date-time
    UserResource:
      title: UserResource
      allOf:
        -
          $ref: '#/components/schemas/User'
        -
          type: object
          properties:
            id:
              type: integer
            remember_token:
              type: string
              nullable: true
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Announcement:
      title: Announcement
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        color:
          type: string
        expires_at:
          type: string
          nullable: true
          format: date-time
    AnnouncementResource:
      title: AnnouncementResource
      allOf:
        -
          $ref: '#/components/schemas/Announcement'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Award:
      title: Award
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
    AwardResource:
      title: AwardResource
      allOf:
        -
          $ref: '#/components/schemas/Award'
        -
          type: object
          properties:
            id:
              type: integer
            order:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Qualification:
      title: Qualification
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
    QualificationResource:
      title: QualificationResource
      allOf:
        -
          $ref: '#/components/schemas/Qualification'
        -
          type: object
          properties:
            id:
              type: integer
            order:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Rank:
      title: Rank
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        abbreviation:
          type: string
          nullable: true
        paygrade:
          type: string
          nullable: true
    RankResource:
      title: RankResource
      allOf:
        -
          $ref: '#/components/schemas/Rank'
        -
          type: object
          properties:
            id:
              type: integer
            order:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Unit:
      title: Unit
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
    UnitResource:
      title: UnitResource
      allOf:
        -
          $ref: '#/components/schemas/Unit'
        -
          type: object
          properties:
            id:
              type: integer
            order:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Submission:
      title: Submission
      type: object
      properties:
        form_id:
          type: integer
        user_id:
          type: integer
          nullable: true
    SubmissionResource:
      title: SubmissionResource
      allOf:
        -
          $ref: '#/components/schemas/Submission'
        -
          type: object
          properties:
            id:
              type: integer
            data:
              type: object
              additionalProperties: true
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    AssignmentRecord:
      title: AssignmentRecord
      type: object
      properties:
        user_id:
          type: integer
        unit_id:
          type: integer
        position_id:
          type: integer
        specialty_id:
          type: integer
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
          nullable: true
    AssignmentRecordResource:
      title: AssignmentRecordResource
      allOf:
        -
          $ref: '#/components/schemas/AssignmentRecord'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    AwardRecord:
      title: AwardRecord
      type: object
      properties:
        user_id:
          type: integer
        award_id:
          type: integer
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
          nullable: true
    AwardRecordResource:
      title: AwardRecordResource
      allOf:
        -
          $ref: '#/components/schemas/AwardRecord'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    CombatRecord:
      title: CombatRecord
      type: object
      properties:
        user_id:
          type: integer
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
    CombatRecordResource:
      title: CombatRecordResource
      allOf:
        -
          $ref: '#/components/schemas/CombatRecord'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    QualificationRecord:
      title: QualificationRecord
      type: object
      properties:
        user_id:
          type: integer
        qualification_id:
          type: integer
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
          nullable: true
    QualificationRecordResource:
      title: QualificationRecordResource
      allOf:
        -
          $ref: '#/components/schemas/QualificationRecord'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    RankRecord:
      title: RankRecord
      type: object
      properties:
        user_id:
          type: integer
        rank_id:
          type: integer
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
          nullable: true
    RankRecordResource:
      title: RankRecordResource
      allOf:
        -
          $ref: '#/components/schemas/RankRecord'
        -
          type: object
          properties:
            id:
              type: integer
            type:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    ServiceRecord:
      title: ServiceRecord
      type: object
      properties:
        user_id:
          type: integer
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
    ServiceRecordResource:
      title: ServiceRecordResource
      allOf:
        -
          $ref: '#/components/schemas/ServiceRecord'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Position:
      title: Position
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
    PositionResource:
      title: PositionResource
      allOf:
        -
          $ref: '#/components/schemas/Position'
        -
          type: object
          properties:
            id:
              type: integer
            order:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Specialty:
      title: Specialty
      type: object
      properties:
        name:
          type: string
        abbreviation:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
    SpecialtyResource:
      title: SpecialtyResource
      allOf:
        -
          $ref: '#/components/schemas/Specialty'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Status:
      title: Status
      type: object
      properties:
        name:
          type: string
        color:
          type: string
    StatusResource:
      title: StatusResource
      allOf:
        -
          $ref: '#/components/schemas/Status'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    ResourceLinks:
      title: ResourceLinks
      type: object
      properties:
        first:
          type: string
          format: uri
        last:
          type: string
          format: uri
        prev:
          type: string
          format: uri
        next:
          type: string
          format: uri
    ResourceMeta:
      title: ResourceMeta
      type: object
      properties:
        current_page:
          type: integer
        from:
          type: integer
        last_page:
          type: integer
        path:
          type: string
        per_page:
          type: integer
        to:
          type: integer
        total:
          type: integer
tags:
  -
    name: Me
    description: 'API documentation for Me'
  -
    name: Announcements
    description: 'API documentation for Announcements'
  -
    name: Awards
    description: 'API documentation for Awards'
  -
    name: Qualifications
    description: 'API documentation for Qualifications'
  -
    name: Ranks
    description: 'API documentation for Ranks'
  -
    name: Roster
    description: 'API documentation for Roster'
  -
    name: Submissions
    description: 'API documentation for Submissions'
  -
    name: Units
    description: 'API documentation for Units'
  -
    name: 'Units Users'
    description: 'API documentation for Units Users'
  -
    name: Users
    description: 'API documentation for Users'
  -
    name: 'Users Assignment Records'
    description: 'API documentation for Users Assignment Records'
  -
    name: 'Users Award Records'
    description: 'API documentation for Users Award Records'
  -
    name: 'Users Combat Records'
    description: 'API documentation for Users Combat Records'
  -
    name: 'Users Qualification Records'
    description: 'API documentation for Users Qualification Records'
  -
    name: 'Users Rank Records'
    description: 'API documentation for Users Rank Records'
  -
    name: 'Users Service Records'
    description: 'API documentation for Users Service Records'
  -
    name: 'Users Position'
    description: 'API documentation for Users Position'
  -
    name: 'Users Rank'
    description: 'API documentation for Users Rank'
  -
    name: 'Users Specialty'
    description: 'API documentation for Users Specialty'
  -
    name: 'Users Status'
    description: 'API documentation for Users Status'
  -
    name: 'Users Unit'
    description: 'API documentation for Users Unit'