openapi: 3.0.3
info:
  title: 'PERSCOM Personnel Management System'
  description: 'The PERSCOM API describes how to interact and manipulate your PERSCOM data available at https://perscom.io. The API provides a powerful interface to allow for third-party collaboration and integration with your PERSCOM Dashboard.'
  contact:
    name: 'Deschutes Design Group LLC'
    url: 'https://www.deschutesdesigngroup.com'
    email: info@deschutesdesigngroup.com
  version: v1
  termsOfService: 'https://perscom.io/privacy-policy'
servers:
  -
    url: 'https://api.perscom.io'
    description: 'Production Environment'
  -
    url: 'https://api.staging.perscom.io'
    description: 'Staging Environment'
security:
  -
    ApiKey: []
  -
    PerscomId: []
paths:
  /v1/me:
    get:
      parameters: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get information about the authenticated user'
      tags:
        - Me
  /v1/announcements:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnnouncementResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create announcement'
      tags:
        - Announcements
    get:
      parameters: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnnouncementResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of announcements'
      tags:
        - Announcements
  /v1/announcements/search:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - title
                          - created_at
                          - expires_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, title, created_at, expires_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: title'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnnouncementResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for announcements'
      tags:
        - Announcements
  '/v1/announcements/{announcement}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: announcement
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnnouncementResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get announcement'
      tags:
        - Announcements
    patch:
      parameters:
        -
          schema:
            type: integer
          name: announcement
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnnouncementResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update announcement'
      tags:
        - Announcements
    delete:
      parameters:
        -
          schema:
            type: integer
          name: announcement
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnnouncementResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete announcement'
      tags:
        - Announcements
  /v1/announcements/batch:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Announcement'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnnouncementResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of announcements'
      tags:
        - Announcements
    patch:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Announcement'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnnouncementResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of announcements'
      tags:
        - Announcements
    delete:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnnouncementResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of announcements'
      tags:
        - Announcements
  /v1/awards:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Award'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create award'
      tags:
        - Awards
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of awards'
      tags:
        - Awards
  /v1/awards/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - image
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for awards'
      tags:
        - Awards
  '/v1/awards/{award}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get award'
      tags:
        - Awards
    patch:
      parameters:
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Award'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update award'
      tags:
        - Awards
    delete:
      parameters:
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete award'
      tags:
        - Awards
  /v1/awards/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Award'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of awards'
      tags:
        - Awards
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Award'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of awards'
      tags:
        - Awards
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of awards'
      tags:
        - Awards
  /v1/qualifications:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Qualification'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create qualification'
      tags:
        - Qualifications
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of qualifications'
      tags:
        - Qualifications
  /v1/qualifications/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - image
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for qualifications'
      tags:
        - Qualifications
  '/v1/qualifications/{qualification}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get qualification'
      tags:
        - Qualifications
    patch:
      parameters:
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Qualification'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update qualification'
      tags:
        - Qualifications
    delete:
      parameters:
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete qualification'
      tags:
        - Qualifications
  /v1/qualifications/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Qualification'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of qualifications'
      tags:
        - Qualifications
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Qualification'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of qualifications'
      tags:
        - Qualifications
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of qualifications'
      tags:
        - Qualifications
  /v1/ranks:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rank'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create rank'
      tags:
        - Ranks
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of ranks'
      tags:
        - Ranks
  /v1/ranks/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - image
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for ranks'
      tags:
        - Ranks
  '/v1/ranks/{rank}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get rank'
      tags:
        - Ranks
    patch:
      parameters:
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update rank'
      tags:
        - Ranks
    delete:
      parameters:
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete rank'
      tags:
        - Ranks
  /v1/ranks/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of ranks'
      tags:
        - Ranks
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of ranks'
      tags:
        - Ranks
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of ranks'
      tags:
        - Ranks
  /v1/roster:
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - users
              - users.rank
              - users.rank.image
              - users.position
              - users.specialty
              - users.status
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of units'
      tags:
        - Roster
  /v1/submissions:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create submission'
      tags:
        - Submissions
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of submissions'
      tags:
        - Submissions
  /v1/submissions/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - form_id
                          - user_id
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, form_id, user_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: form_id, user_id'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - form
                          - user
                          - statuses
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, form_id, user_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, form_id, user_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for submissions'
      tags:
        - Submissions
  '/v1/submissions/{submission}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: submission
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get submission'
      tags:
        - Submissions
    patch:
      parameters:
        -
          schema:
            type: integer
          name: submission
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update submission'
      tags:
        - Submissions
    delete:
      parameters:
        -
          schema:
            type: integer
          name: submission
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete submission'
      tags:
        - Submissions
  /v1/submissions/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Submission'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of submissions'
      tags:
        - Submissions
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Submission'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of submissions'
      tags:
        - Submissions
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of submissions'
      tags:
        - Submissions
  /v1/units:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - groups
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create unit'
      tags:
        - Units
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - groups
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of units'
      tags:
        - Units
  /v1/units/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - groups
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - assignment_records
                          - 'assignment_records.*'
                          - groups
                          - users
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for units'
      tags:
        - Units
  '/v1/units/{unit}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - groups
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get unit'
      tags:
        - Units
    patch:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - groups
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update unit'
      tags:
        - Units
    delete:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - groups
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete unit'
      tags:
        - Units
  /v1/units/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - groups
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of units'
      tags:
        - Units
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - groups
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of units'
      tags:
        - Units
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - groups
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of units'
      tags:
        - Units
  '/v1/units/{unit}/users':
    post:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create user'
      tags:
        - 'Units Users'
    get:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of users'
      tags:
        - 'Units Users'
  '/v1/units/{unit}/users/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for users'
      tags:
        - 'Units Users'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - assignment_records
                          - award_records
                          - combat_records
                          - position
                          - qualification_records
                          - rank
                          - rank_records
                          - service_records
                          - specialty
                          - status
                          - unit
                      filters:
                        type: object
                        properties: {}
  '/v1/units/{unit}/users/{user}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get user'
      tags:
        - 'Units Users'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update user'
      tags:
        - 'Units Users'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete user'
      tags:
        - 'Units Users'
  '/v1/units/{unit}/users/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of users'
      tags:
        - 'Units Users'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of users'
      tags:
        - 'Units Users'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of users'
      tags:
        - 'Units Users'
  '/v1/units/{unit}/users/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate user with unit'
      tags:
        - 'Units Users'
  '/v1/units/{unit}/users/{user}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate user from unit'
      tags:
        - 'Units Users'
  /v1/users:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - assignment_records.position
              - assignment_records.specialty
              - assignment_records.unit
              - assignment_records.status
              - award_records
              - award_records.award
              - award_records.award.image
              - combat_records
              - fields
              - position
              - qualification_records
              - qualification_records.qualification
              - qualification_records.qualification.image
              - rank
              - rank.image
              - rank_records
              - rank_records.rank
              - rank_records.rank.image
              - secondary_positions
              - secondary_specialties
              - secondary_units
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create user'
      tags:
        - Users
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - assignment_records.position
              - assignment_records.specialty
              - assignment_records.unit
              - assignment_records.status
              - award_records
              - award_records.award
              - award_records.award.image
              - combat_records
              - fields
              - position
              - qualification_records
              - qualification_records.qualification
              - qualification_records.qualification.image
              - rank
              - rank.image
              - rank_records
              - rank_records.rank
              - rank_records.rank.image
              - secondary_positions
              - secondary_specialties
              - secondary_units
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of users'
      tags:
        - Users
  /v1/users/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - assignment_records.position
              - assignment_records.specialty
              - assignment_records.unit
              - assignment_records.status
              - award_records
              - award_records.award
              - award_records.award.image
              - combat_records
              - fields
              - position
              - qualification_records
              - qualification_records.qualification
              - qualification_records.qualification.image
              - rank
              - rank.image
              - rank_records
              - rank_records.rank
              - rank_records.rank.image
              - secondary_positions
              - secondary_specialties
              - secondary_units
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - email
                          - email_verified_at
                          - position_id
                          - rank_id
                          - specialty_id
                          - status_id
                          - unit_id
                          - approved
                          - last_seen_at
                          - updated_at
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, email, email_verified_at, position_id, rank_id, specialty_id, status_id, unit_id, approved, last_seen_at, updated_at, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: id, name, email, email_verified_at, position_id, rank_id, specialty_id, status_id, unit_id, approved, last_seen_at, updated_at, created_at'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - assignment_records
                          - assignment_records.position
                          - assignment_records.specialty
                          - assignment_records.unit
                          - assignment_records.status
                          - award_records
                          - award_records.award
                          - award_records.award.image
                          - combat_records
                          - fields
                          - position
                          - qualification_records
                          - qualification_records.qualification
                          - qualification_records.qualification.image
                          - rank
                          - rank.image
                          - rank_records
                          - rank_records.rank
                          - rank_records.rank.image
                          - secondary_positions
                          - secondary_specialties
                          - secondary_units
                          - service_records
                          - specialty
                          - status
                          - unit
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, email, email_verified_at, position_id, rank_id, specialty_id, status_id, unit_id, approved, last_seen_at, updated_at, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, email, email_verified_at, position_id, rank_id, specialty_id, status_id, unit_id, approved, last_seen_at, updated_at, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
                sort:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - email
                          - email_verified_at
                          - position_id
                          - rank_id
                          - specialty_id
                          - status_id
                          - unit_id
                          - approved
                          - last_seen_at
                          - updated_at
                          - created_at
                      direction:
                        type: string
                        enum:
                          - asc
                          - desc
                    required:
                      - field
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for users'
      tags:
        - Users
  '/v1/users/{user}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - assignment_records.position
              - assignment_records.specialty
              - assignment_records.unit
              - assignment_records.status
              - award_records
              - award_records.award
              - award_records.award.image
              - combat_records
              - fields
              - position
              - qualification_records
              - qualification_records.qualification
              - qualification_records.qualification.image
              - rank
              - rank.image
              - rank_records
              - rank_records.rank
              - rank_records.rank.image
              - secondary_positions
              - secondary_specialties
              - secondary_units
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get user'
      tags:
        - Users
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - assignment_records.position
              - assignment_records.specialty
              - assignment_records.unit
              - assignment_records.status
              - award_records
              - award_records.award
              - award_records.award.image
              - combat_records
              - fields
              - position
              - qualification_records
              - qualification_records.qualification
              - qualification_records.qualification.image
              - rank
              - rank.image
              - rank_records
              - rank_records.rank
              - rank_records.rank.image
              - secondary_positions
              - secondary_specialties
              - secondary_units
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update user'
      tags:
        - Users
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - assignment_records.position
              - assignment_records.specialty
              - assignment_records.unit
              - assignment_records.status
              - award_records
              - award_records.award
              - award_records.award.image
              - combat_records
              - fields
              - position
              - qualification_records
              - qualification_records.qualification
              - qualification_records.qualification.image
              - rank
              - rank.image
              - rank_records
              - rank_records.rank
              - rank_records.rank.image
              - secondary_positions
              - secondary_specialties
              - secondary_units
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete user'
      tags:
        - Users
  /v1/users/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - assignment_records.position
              - assignment_records.specialty
              - assignment_records.unit
              - assignment_records.status
              - award_records
              - award_records.award
              - award_records.award.image
              - combat_records
              - fields
              - position
              - qualification_records
              - qualification_records.qualification
              - qualification_records.qualification.image
              - rank
              - rank.image
              - rank_records
              - rank_records.rank
              - rank_records.rank.image
              - secondary_positions
              - secondary_specialties
              - secondary_units
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of users'
      tags:
        - Users
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - assignment_records.position
              - assignment_records.specialty
              - assignment_records.unit
              - assignment_records.status
              - award_records
              - award_records.award
              - award_records.award.image
              - combat_records
              - fields
              - position
              - qualification_records
              - qualification_records.qualification
              - qualification_records.qualification.image
              - rank
              - rank.image
              - rank_records
              - rank_records.rank
              - rank_records.rank.image
              - secondary_positions
              - secondary_specialties
              - secondary_units
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of users'
      tags:
        - Users
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - assignment_records.position
              - assignment_records.specialty
              - assignment_records.unit
              - assignment_records.status
              - award_records
              - award_records.award
              - award_records.award.image
              - combat_records
              - fields
              - position
              - qualification_records
              - qualification_records.qualification
              - qualification_records.qualification.image
              - rank
              - rank.image
              - rank_records
              - rank_records.rank
              - rank_records.rank.image
              - secondary_positions
              - secondary_specialties
              - secondary_units
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of users'
      tags:
        - Users
  '/v1/users/{user}/assignment-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records assignment'
      tags:
        - 'Users Assignment Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records assignments'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/assignment-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - document
                          - position
                          - specialty
                          - status
                          - unit
                      filters:
                        type: object
                        properties: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records assignments'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/assignment-records/{assignment_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: assignment_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records assignment'
      tags:
        - 'Users Assignment Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: assignment_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records assignment'
      tags:
        - 'Users Assignment Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: assignment_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records assignment'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/assignment-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/AssignmentRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records assignments'
      tags:
        - 'Users Assignment Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/AssignmentRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records assignments'
      tags:
        - 'Users Assignment Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records assignments'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/assignment-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records assignment with user'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/assignment-records/{assignment_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: assignment_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records assignment from user'
      tags:
        - 'Users Assignment Records'
  '/v1/users/{user}/award-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwardRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records award'
      tags:
        - 'Users Award Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records awards'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/award-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - award
                          - award.image
                          - document
                      filters:
                        type: object
                        properties: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records awards'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/award-records/{award_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: award_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records award'
      tags:
        - 'Users Award Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: award_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwardRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records award'
      tags:
        - 'Users Award Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: award_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records award'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/award-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/AwardRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records awards'
      tags:
        - 'Users Award Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/AwardRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records awards'
      tags:
        - 'Users Award Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records awards'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/award-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records award with user'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/award-records/{award_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: award_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records award from user'
      tags:
        - 'Users Award Records'
  '/v1/users/{user}/combat-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombatRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records combat'
      tags:
        - 'Users Combat Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records combat'
      tags:
        - 'Users Combat Records'
  '/v1/users/{user}/combat-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records combat'
      tags:
        - 'Users Combat Records'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - document
                      filters:
                        type: object
                        properties: {}
  '/v1/users/{user}/combat-records/{combat_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: combat_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records combat'
      tags:
        - 'Users Combat Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: combat_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombatRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records combat'
      tags:
        - 'Users Combat Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: combat_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records combat'
      tags:
        - 'Users Combat Records'
  '/v1/users/{user}/combat-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/CombatRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records combat'
      tags:
        - 'Users Combat Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/CombatRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records combat'
      tags:
        - 'Users Combat Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records combat'
      tags:
        - 'Users Combat Records'
  '/v1/users/{user}/combat-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records combat with user'
      tags:
        - 'Users Combat Records'
  '/v1/users/{user}/combat-records/{combat_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: combat_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records combat from user'
      tags:
        - 'Users Combat Records'
  '/v1/users/{user}/qualification-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QualificationRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records qualification'
      tags:
        - 'Users Qualification Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records qualifications'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/qualification-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - document
                          - qualification
                          - qualification.image
                      filters:
                        type: object
                        properties: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records qualifications'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/qualification-records/{qualification_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records qualification'
      tags:
        - 'Users Qualification Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QualificationRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records qualification'
      tags:
        - 'Users Qualification Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records qualification'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/qualification-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/QualificationRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records qualifications'
      tags:
        - 'Users Qualification Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/QualificationRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records qualifications'
      tags:
        - 'Users Qualification Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records qualifications'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/qualification-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records qualification with user'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/qualification-records/{qualification_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records qualification from user'
      tags:
        - 'Users Qualification Records'
  '/v1/users/{user}/rank-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RankRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records rank'
      tags:
        - 'Users Rank Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records ranks'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/rank-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - document
                          - rank
                          - rank.image
                      filters:
                        type: object
                        properties: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records ranks'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/rank-records/{rank_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records rank'
      tags:
        - 'Users Rank Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RankRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records rank'
      tags:
        - 'Users Rank Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records rank'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/rank-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/RankRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records ranks'
      tags:
        - 'Users Rank Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/RankRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records ranks'
      tags:
        - 'Users Rank Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records ranks'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/rank-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records rank with user'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/rank-records/{rank_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records rank from user'
      tags:
        - 'Users Rank Records'
  '/v1/users/{user}/service-records':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records service'
      tags:
        - 'Users Service Records'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records service'
      tags:
        - 'Users Service Records'
  '/v1/users/{user}/service-records/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records service'
      tags:
        - 'Users Service Records'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - document
                      filters:
                        type: object
                        properties: {}
  '/v1/users/{user}/service-records/{service_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: service_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records service'
      tags:
        - 'Users Service Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: service_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records service'
      tags:
        - 'Users Service Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: service_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records service'
      tags:
        - 'Users Service Records'
  '/v1/users/{user}/service-records/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/ServiceRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records service'
      tags:
        - 'Users Service Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/ServiceRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records service'
      tags:
        - 'Users Service Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records service'
      tags:
        - 'Users Service Records'
  '/v1/users/{user}/service-records/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate records service with user'
      tags:
        - 'Users Service Records'
  '/v1/users/{user}/service-records/{service_record}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: service_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate records service from user'
      tags:
        - 'Users Service Records'
  '/v1/users/{user}/position':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Position'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create position'
      tags:
        - 'Users Position'
  '/v1/users/{user}/position/{position}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: position
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get position'
      tags:
        - 'Users Position'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: position
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Position'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update position'
      tags:
        - 'Users Position'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: position
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete position'
      tags:
        - 'Users Position'
  '/v1/users/{user}/rank':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rank'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create rank'
      tags:
        - 'Users Rank'
  '/v1/users/{user}/rank/{rank}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get rank'
      tags:
        - 'Users Rank'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update rank'
      tags:
        - 'Users Rank'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete rank'
      tags:
        - 'Users Rank'
  '/v1/users/{user}/specialty':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create specialty'
      tags:
        - 'Users Specialty'
  '/v1/users/{user}/specialty/{specialty}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: specialty
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get specialty'
      tags:
        - 'Users Specialty'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: specialty
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update specialty'
      tags:
        - 'Users Specialty'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: specialty
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete specialty'
      tags:
        - 'Users Specialty'
  '/v1/users/{user}/status':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create status'
      tags:
        - 'Users Status'
  '/v1/users/{user}/status/{status}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: status
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get status'
      tags:
        - 'Users Status'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: status
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update status'
      tags:
        - 'Users Status'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: status
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete status'
      tags:
        - 'Users Status'
  '/v1/users/{user}/unit/{unit}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get unit'
      tags:
        - 'Users Unit'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update unit'
      tags:
        - 'Users Unit'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete unit'
      tags:
        - 'Users Unit'
  '/v1/users/{user}/unit/batch':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of units'
      tags:
        - 'Users Unit'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of units'
      tags:
        - 'Users Unit'
  /v1/calendars:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - events
              - events.author
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Calendar'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CalendarResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create calendar'
      tags:
        - Calendars
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - events
              - events.author
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CalendarResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of calendars'
      tags:
        - Calendars
  /v1/calendars/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - events
              - events.author
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - timezone
                          - author_id
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, timezone, author_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name, timezone, author_id'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - events
                          - events.author
                          - tags
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, timezone, author_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, timezone, author_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
                scopes:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum:
                          - tags
                      parameters:
                        type: array
                        items:
                          type: string
                    required:
                      - name
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CalendarResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for calendars'
      tags:
        - Calendars
  '/v1/calendars/{calendar}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - events
              - events.author
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CalendarResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get calendar'
      tags:
        - Calendars
    patch:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - events
              - events.author
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Calendar'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CalendarResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update calendar'
      tags:
        - Calendars
    delete:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - events
              - events.author
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CalendarResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete calendar'
      tags:
        - Calendars
  /v1/calendars/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - events
              - events.author
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Calendar'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CalendarResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of calendars'
      tags:
        - Calendars
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - events
              - events.author
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Calendar'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CalendarResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of calendars'
      tags:
        - Calendars
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - events
              - events.author
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CalendarResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of calendars'
      tags:
        - Calendars
  '/v1/calendars/{calendar}/events':
    post:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create event'
      tags:
        - 'Calendars Events'
    get:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of events'
      tags:
        - 'Calendars Events'
  '/v1/calendars/{calendar}/events/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for events'
      tags:
        - 'Calendars Events'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scopes:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum:
                          - datePeriod
                          - tags
                      parameters:
                        type: array
                        items:
                          type: string
                    required:
                      - name
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - calendar_id
                          - start
                          - end
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, calendar_id, start, end, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name, calendar_id, start, end'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - calendar
                          - tags
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, calendar_id, start, end, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, calendar_id, start, end, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
  '/v1/calendars/{calendar}/events/{event}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get event'
      tags:
        - 'Calendars Events'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update event'
      tags:
        - 'Calendars Events'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete event'
      tags:
        - 'Calendars Events'
  '/v1/calendars/{calendar}/events/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Event'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of events'
      tags:
        - 'Calendars Events'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Event'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of events'
      tags:
        - 'Calendars Events'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of events'
      tags:
        - 'Calendars Events'
  '/v1/calendars/{calendar}/events/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate event with calendar'
      tags:
        - 'Calendars Events'
  '/v1/calendars/{calendar}/events/{event}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: calendar
          in: path
          required: true
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate event from calendar'
      tags:
        - 'Calendars Events'
  /v1/events:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create event'
      tags:
        - Events
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of events'
      tags:
        - Events
  /v1/events/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scopes:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum:
                          - datePeriod
                          - tags
                      parameters:
                        type: array
                        items:
                          type: string
                    required:
                      - name
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - calendar_id
                          - start
                          - end
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, calendar_id, start, end, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name, calendar_id, start, end'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - calendar
                          - tags
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, calendar_id, start, end, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, calendar_id, start, end, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for events'
      tags:
        - Events
  '/v1/events/{event}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get event'
      tags:
        - Events
    patch:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update event'
      tags:
        - Events
    delete:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete event'
      tags:
        - Events
  /v1/events/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Event'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of events'
      tags:
        - Events
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Event'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of events'
      tags:
        - Events
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - calendar
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of events'
      tags:
        - Events
  '/v1/users/{user}/position/batch':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Position'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of positions'
      tags:
        - 'Users Position'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of positions'
      tags:
        - 'Users Position'
  '/v1/users/{user}/rank/batch':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of ranks'
      tags:
        - 'Users Rank'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of ranks'
      tags:
        - 'Users Rank'
  '/v1/users/{user}/specialty/batch':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Specialty'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of specialties'
      tags:
        - 'Users Specialty'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of specialties'
      tags:
        - 'Users Specialty'
  '/v1/users/{user}/status/batch':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Status'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of statuses'
      tags:
        - 'Users Status'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of statuses'
      tags:
        - 'Users Status'
  '/v1/users/{user}/secondary-positions':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Position'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create position'
      tags:
        - 'Users Secondary Positions'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of positions'
      tags:
        - 'Users Secondary Positions'
  '/v1/users/{user}/secondary-positions/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for positions'
      tags:
        - 'Users Secondary Positions'
  '/v1/users/{user}/secondary-positions/{secondary_position}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_position
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get position'
      tags:
        - 'Users Secondary Positions'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_position
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Position'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update position'
      tags:
        - 'Users Secondary Positions'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_position
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete position'
      tags:
        - 'Users Secondary Positions'
  '/v1/users/{user}/secondary-positions/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Position'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of positions'
      tags:
        - 'Users Secondary Positions'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Position'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of positions'
      tags:
        - 'Users Secondary Positions'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of positions'
      tags:
        - 'Users Secondary Positions'
  '/v1/users/{user}/secondary-positions/attach':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Attach positions'
      tags:
        - 'Users Secondary Positions'
  '/v1/users/{user}/secondary-positions/detach':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Detach positions'
      tags:
        - 'Users Secondary Positions'
  '/v1/users/{user}/secondary-positions/sync':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Sync positions'
      tags:
        - 'Users Secondary Positions'
  '/v1/users/{user}/secondary-positions/toggle':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Toggle positions'
      tags:
        - 'Users Secondary Positions'
  '/v1/users/{user}/secondary-positions/{secondary_position}/pivot':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_position
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pivot:
                  type: object
                  description: 'Pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update pivot'
      tags:
        - 'Users Secondary Positions'
  '/v1/users/{user}/secondary-specialties':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create specialty'
      tags:
        - 'Users Secondary Specialties'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of specialties'
      tags:
        - 'Users Secondary Specialties'
  '/v1/users/{user}/secondary-specialties/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for specialties'
      tags:
        - 'Users Secondary Specialties'
  '/v1/users/{user}/secondary-specialties/{secondary_specialty}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_specialty
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get specialty'
      tags:
        - 'Users Secondary Specialties'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_specialty
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update specialty'
      tags:
        - 'Users Secondary Specialties'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_specialty
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete specialty'
      tags:
        - 'Users Secondary Specialties'
  '/v1/users/{user}/secondary-specialties/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Specialty'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of specialties'
      tags:
        - 'Users Secondary Specialties'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Specialty'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of specialties'
      tags:
        - 'Users Secondary Specialties'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of specialties'
      tags:
        - 'Users Secondary Specialties'
  '/v1/users/{user}/secondary-specialties/attach':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Attach specialties'
      tags:
        - 'Users Secondary Specialties'
  '/v1/users/{user}/secondary-specialties/detach':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Detach specialties'
      tags:
        - 'Users Secondary Specialties'
  '/v1/users/{user}/secondary-specialties/sync':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Sync specialties'
      tags:
        - 'Users Secondary Specialties'
  '/v1/users/{user}/secondary-specialties/toggle':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Toggle specialties'
      tags:
        - 'Users Secondary Specialties'
  '/v1/users/{user}/secondary-specialties/{secondary_specialty}/pivot':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_specialty
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pivot:
                  type: object
                  description: 'Pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update pivot'
      tags:
        - 'Users Secondary Specialties'
  '/v1/users/{user}/secondary-units':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create unit'
      tags:
        - 'Users Secondary Units'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of units'
      tags:
        - 'Users Secondary Units'
  '/v1/users/{user}/secondary-units/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for units'
      tags:
        - 'Users Secondary Units'
  '/v1/users/{user}/secondary-units/{secondary_unit}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_unit
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get unit'
      tags:
        - 'Users Secondary Units'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_unit
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update unit'
      tags:
        - 'Users Secondary Units'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_unit
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete unit'
      tags:
        - 'Users Secondary Units'
  '/v1/users/{user}/secondary-units/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of units'
      tags:
        - 'Users Secondary Units'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of units'
      tags:
        - 'Users Secondary Units'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of units'
      tags:
        - 'Users Secondary Units'
  '/v1/users/{user}/secondary-units/attach':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Attach units'
      tags:
        - 'Users Secondary Units'
  '/v1/users/{user}/secondary-units/detach':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Detach units'
      tags:
        - 'Users Secondary Units'
  '/v1/users/{user}/secondary-units/sync':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Sync units'
      tags:
        - 'Users Secondary Units'
  '/v1/users/{user}/secondary-units/toggle':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Toggle units'
      tags:
        - 'Users Secondary Units'
  '/v1/users/{user}/secondary-units/{secondary_unit}/pivot':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: secondary_unit
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pivot:
                  type: object
                  description: 'Pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update pivot'
      tags:
        - 'Users Secondary Units'
  /v1/forms:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FormResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create form'
      tags:
        - Forms
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FormResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of forms'
      tags:
        - Forms
  /v1/forms/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scopes:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum:
                          - tags
                      parameters:
                        type: array
                        items:
                          type: string
                    required:
                      - name
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - slug
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, slug, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name, slug'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - fields
                          - submissions
                          - 'submissions.*'
                          - tags
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, slug, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, slug, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FormResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for forms'
      tags:
        - Forms
  '/v1/forms/{form}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FormResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get form'
      tags:
        - Forms
    patch:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FormResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update form'
      tags:
        - Forms
    delete:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FormResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete form'
      tags:
        - Forms
  /v1/forms/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Form'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FormResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of forms'
      tags:
        - Forms
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Form'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FormResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of forms'
      tags:
        - Forms
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FormResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of forms'
      tags:
        - Forms
  '/v1/forms/{form}/submissions':
    post:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create submission'
      tags:
        - 'Forms Submissions'
    get:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of submissions'
      tags:
        - 'Forms Submissions'
  '/v1/forms/{form}/submissions/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - form_id
                          - user_id
                          - created_at
                          - tags
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, form_id, user_id, created_at, tags] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: form_id, user_id'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - form
                          - user
                          - statuses
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, form_id, user_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, form_id, user_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for submissions'
      tags:
        - 'Forms Submissions'
  '/v1/forms/{form}/submissions/{submission}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: integer
          name: submission
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get submission'
      tags:
        - 'Forms Submissions'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: integer
          name: submission
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update submission'
      tags:
        - 'Forms Submissions'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: integer
          name: submission
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete submission'
      tags:
        - 'Forms Submissions'
  '/v1/forms/{form}/submissions/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Submission'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of submissions'
      tags:
        - 'Forms Submissions'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Submission'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of submissions'
      tags:
        - 'Forms Submissions'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of submissions'
      tags:
        - 'Forms Submissions'
  '/v1/forms/{form}/submissions/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate submission with form'
      tags:
        - 'Forms Submissions'
  '/v1/forms/{form}/submissions/{submission}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: integer
          name: submission
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - user
              - statuses
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SubmissionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate submission from form'
      tags:
        - 'Forms Submissions'
  '/v1/users/{user}/fields':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FieldResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create field'
      tags:
        - 'Users Fields'
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FieldResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of fields'
      tags:
        - 'Users Fields'
  '/v1/users/{user}/fields/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FieldResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for fields'
      tags:
        - 'Users Fields'
  '/v1/users/{user}/fields/{field}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: field
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FieldResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get field'
      tags:
        - 'Users Fields'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: field
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FieldResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update field'
      tags:
        - 'Users Fields'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: field
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FieldResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete field'
      tags:
        - 'Users Fields'
  '/v1/users/{user}/fields/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Field'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FieldResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of fields'
      tags:
        - 'Users Fields'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Field'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FieldResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of fields'
      tags:
        - 'Users Fields'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FieldResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of fields'
      tags:
        - 'Users Fields'
  '/v1/users/{user}/fields/attach':
    post:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Attach fields'
      tags:
        - 'Users Fields'
  '/v1/users/{user}/fields/detach':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Detach fields'
      tags:
        - 'Users Fields'
  '/v1/users/{user}/fields/sync':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Sync fields'
      tags:
        - 'Users Fields'
  '/v1/users/{user}/fields/toggle':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Toggle fields'
      tags:
        - 'Users Fields'
  '/v1/users/{user}/fields/{field}/pivot':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: user
          in: path
          required: true
        -
          schema:
            type: integer
          name: field
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pivot:
                  type: object
                  description: 'Pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update pivot'
      tags:
        - 'Users Fields'
  /v1/newsfeed:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - causer
              - subject
              - 'subject?.user'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Newsfeed'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NewsfeedResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create activity log'
      tags:
        - Newsfeed
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - causer
              - subject
              - 'subject?.user'
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NewsfeedResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of activity log'
      tags:
        - Newsfeed
  /v1/newsfeed/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - causer
              - subject
              - 'subject?.user'
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NewsfeedResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for activity log'
      tags:
        - Newsfeed
  '/v1/newsfeed/{newsfeed}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - causer
              - subject
              - 'subject?.user'
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NewsfeedResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get activity log'
      tags:
        - Newsfeed
    patch:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - causer
              - subject
              - 'subject?.user'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Newsfeed'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NewsfeedResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update activity log'
      tags:
        - Newsfeed
    delete:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - causer
              - subject
              - 'subject?.user'
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NewsfeedResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete activity log'
      tags:
        - Newsfeed
  /v1/newsfeed/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - causer
              - subject
              - 'subject?.user'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Newsfeed'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NewsfeedResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of activity log'
      tags:
        - Newsfeed
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - causer
              - subject
              - 'subject?.user'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Newsfeed'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NewsfeedResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of activity log'
      tags:
        - Newsfeed
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - causer
              - subject
              - 'subject?.user'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NewsfeedResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of activity log'
      tags:
        - Newsfeed
  '/v1/newsfeed/{newsfeed}/likes':
    post:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create user'
      tags:
        - 'Newsfeed Likes'
    get:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of users'
      tags:
        - 'Newsfeed Likes'
  '/v1/newsfeed/{newsfeed}/likes/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for users'
      tags:
        - 'Newsfeed Likes'
  '/v1/newsfeed/{newsfeed}/likes/{like}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
        -
          schema:
            type: integer
          name: like
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get user'
      tags:
        - 'Newsfeed Likes'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
        -
          schema:
            type: integer
          name: like
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update user'
      tags:
        - 'Newsfeed Likes'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
        -
          schema:
            type: integer
          name: like
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete user'
      tags:
        - 'Newsfeed Likes'
  '/v1/newsfeed/{newsfeed}/likes/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of users'
      tags:
        - 'Newsfeed Likes'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of users'
      tags:
        - 'Newsfeed Likes'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of users'
      tags:
        - 'Newsfeed Likes'
  '/v1/newsfeed/{newsfeed}/likes/attach':
    post:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Attach users'
      tags:
        - 'Newsfeed Likes'
  '/v1/newsfeed/{newsfeed}/likes/detach':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Detach users'
      tags:
        - 'Newsfeed Likes'
  '/v1/newsfeed/{newsfeed}/likes/sync':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - award_records
              - combat_records
              - position
              - qualification_records
              - rank
              - rank_records
              - service_records
              - specialty
              - status
              - unit
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Sync users'
      tags:
        - 'Newsfeed Likes'
  '/v1/newsfeed/{newsfeed}/likes/toggle':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Toggle users'
      tags:
        - 'Newsfeed Likes'
  '/v1/newsfeed/{newsfeed}/likes/{like}/pivot':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: newsfeed
          in: path
          required: true
        -
          schema:
            type: integer
          name: like
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pivot:
                  type: object
                  description: 'Pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update pivot'
      tags:
        - 'Newsfeed Likes'
  /v1/groups:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - units
              - units.users
              - 'units.users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create group'
      tags:
        - Groups
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - units
              - units.users
              - 'units.users.*'
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of groups'
      tags:
        - Groups
  /v1/groups/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - units
              - units.users
              - 'units.users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - units
                          - units.users
                          - 'units.users.*'
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
                scopes:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum:
                          - orderForRoster
                      parameters:
                        type: array
                        items:
                          type: string
                    required:
                      - name
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for groups'
      tags:
        - Groups
  '/v1/groups/{group}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - units
              - units.users
              - 'units.users.*'
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get group'
      tags:
        - Groups
    patch:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - units
              - units.users
              - 'units.users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update group'
      tags:
        - Groups
    delete:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - units
              - units.users
              - 'units.users.*'
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete group'
      tags:
        - Groups
  /v1/groups/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - units
              - units.users
              - 'units.users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Group'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of groups'
      tags:
        - Groups
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - units
              - units.users
              - 'units.users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Group'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of groups'
      tags:
        - Groups
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - units
              - units.users
              - 'units.users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of groups'
      tags:
        - Groups
  '/v1/groups/{group}/units':
    post:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create unit'
      tags:
        - 'Groups Units'
    get:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of units'
      tags:
        - 'Groups Units'
  '/v1/groups/{group}/units/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - users
                          - 'users.*'
                      filters:
                        type: object
                        properties: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for units'
      tags:
        - 'Groups Units'
  '/v1/groups/{group}/units/{unit}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get unit'
      tags:
        - 'Groups Units'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update unit'
      tags:
        - 'Groups Units'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UnitResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete unit'
      tags:
        - 'Groups Units'
  '/v1/groups/{group}/units/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of units'
      tags:
        - 'Groups Units'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Unit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of units'
      tags:
        - 'Groups Units'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of units'
      tags:
        - 'Groups Units'
  '/v1/groups/{group}/units/attach':
    post:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Attach units'
      tags:
        - 'Groups Units'
  '/v1/groups/{group}/units/detach':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Detach units'
      tags:
        - 'Groups Units'
  '/v1/groups/{group}/units/sync':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Sync units'
      tags:
        - 'Groups Units'
  '/v1/groups/{group}/units/toggle':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Toggle units'
      tags:
        - 'Groups Units'
  '/v1/groups/{group}/units/{unit}/pivot':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: group
          in: path
          required: true
        -
          schema:
            type: integer
          name: unit
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - users
              - 'users.*'
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pivot:
                  type: object
                  description: 'Pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update pivot'
      tags:
        - 'Groups Units'
  /v1/positions:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Position'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create position'
      tags:
        - Positions
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of positions'
      tags:
        - Positions
  /v1/positions/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - assignment_records
                          - 'assignment_records.*'
                          - users
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for positions'
      tags:
        - Positions
  '/v1/positions/{position}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: position
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get position'
      tags:
        - Positions
    patch:
      parameters:
        -
          schema:
            type: integer
          name: position
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Position'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update position'
      tags:
        - Positions
    delete:
      parameters:
        -
          schema:
            type: integer
          name: position
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PositionResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete position'
      tags:
        - Positions
  /v1/positions/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Position'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of positions'
      tags:
        - Positions
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Position'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of positions'
      tags:
        - Positions
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PositionResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of positions'
      tags:
        - Positions
  /v1/specialties:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create specialty'
      tags:
        - Specialties
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of specialties'
      tags:
        - Specialties
  /v1/specialties/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - assignment_records
                          - 'assignment_records.*'
                          - users
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for specialties'
      tags:
        - Specialties
  '/v1/specialties/{specialty}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: specialty
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get specialty'
      tags:
        - Specialties
    patch:
      parameters:
        -
          schema:
            type: integer
          name: specialty
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update specialty'
      tags:
        - Specialties
    delete:
      parameters:
        -
          schema:
            type: integer
          name: specialty
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialtyResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete specialty'
      tags:
        - Specialties
  /v1/specialties/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Specialty'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of specialties'
      tags:
        - Specialties
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Specialty'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of specialties'
      tags:
        - Specialties
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - assignment_records
              - 'assignment_records.*'
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialtyResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of specialties'
      tags:
        - Specialties
  /v1/tasks:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create task'
      tags:
        - Tasks
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of tasks'
      tags:
        - Tasks
  /v1/tasks/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - title
                          - form_id
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, title, form_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: title, form_id'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - form
                          - users
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, title, form_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, title, form_id, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for tasks'
      tags:
        - Tasks
  '/v1/tasks/{task}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: task
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get task'
      tags:
        - Tasks
    patch:
      parameters:
        -
          schema:
            type: integer
          name: task
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update task'
      tags:
        - Tasks
    delete:
      parameters:
        -
          schema:
            type: integer
          name: task
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - form
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete task'
      tags:
        - Tasks
  /v1/tasks/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Task'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of tasks'
      tags:
        - Tasks
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Task'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of tasks'
      tags:
        - Tasks
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - form
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of tasks'
      tags:
        - Tasks
  /v1/statuses:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - submissions
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create status'
      tags:
        - Statuses
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - submissions
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of statuses'
      tags:
        - Statuses
  /v1/statuses/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - submissions
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - text_color
                          - bg_color
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, text_color, bg_color, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name, text_color, bg_color'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - submissions
                          - users
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, text_color, bg_color, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, text_color, bg_color, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for statuses'
      tags:
        - Statuses
  '/v1/statuses/{status}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: status
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - submissions
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get status'
      tags:
        - Statuses
    patch:
      parameters:
        -
          schema:
            type: integer
          name: status
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - submissions
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update status'
      tags:
        - Statuses
    delete:
      parameters:
        -
          schema:
            type: integer
          name: status
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - submissions
              - users
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatusResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete status'
      tags:
        - Statuses
  /v1/statuses/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - submissions
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Status'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of statuses'
      tags:
        - Statuses
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - submissions
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Status'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of statuses'
      tags:
        - Statuses
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - submissions
              - users
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of statuses'
      tags:
        - Statuses
  /v1/categories:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - awards
              - documents
              - forms
              - qualifications
              - ranks
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CategoryResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create category'
      tags:
        - Categories
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - awards
              - documents
              - forms
              - qualifications
              - ranks
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategoryResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of categories'
      tags:
        - Categories
  /v1/categories/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - awards
              - documents
              - forms
              - qualifications
              - ranks
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - awards
                          - documents
                          - forms
                          - qualifications
                          - ranks
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategoryResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for categories'
      tags:
        - Categories
  '/v1/categories/{category}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - awards
              - documents
              - forms
              - qualifications
              - ranks
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CategoryResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get category'
      tags:
        - Categories
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - awards
              - documents
              - forms
              - qualifications
              - ranks
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CategoryResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update category'
      tags:
        - Categories
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - awards
              - documents
              - forms
              - qualifications
              - ranks
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CategoryResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete category'
      tags:
        - Categories
  /v1/categories/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - awards
              - documents
              - forms
              - qualifications
              - ranks
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Category'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategoryResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of categories'
      tags:
        - Categories
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - awards
              - documents
              - forms
              - qualifications
              - ranks
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Category'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategoryResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of categories'
      tags:
        - Categories
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - awards
              - documents
              - forms
              - qualifications
              - ranks
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategoryResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of categories'
      tags:
        - Categories
  '/v1/categories/{category}/awards':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Award'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create award'
      tags:
        - 'Categories Awards'
    get:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of awards'
      tags:
        - 'Categories Awards'
  '/v1/categories/{category}/awards/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - image
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for awards'
      tags:
        - 'Categories Awards'
  '/v1/categories/{category}/awards/{award}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get award'
      tags:
        - 'Categories Awards'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Award'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update award'
      tags:
        - 'Categories Awards'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete award'
      tags:
        - 'Categories Awards'
  '/v1/categories/{category}/awards/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Award'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of awards'
      tags:
        - 'Categories Awards'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Award'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of awards'
      tags:
        - 'Categories Awards'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of awards'
      tags:
        - 'Categories Awards'
  '/v1/categories/{category}/awards/attach':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Attach awards'
      tags:
        - 'Categories Awards'
  '/v1/categories/{category}/awards/detach':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Detach awards'
      tags:
        - 'Categories Awards'
  '/v1/categories/{category}/awards/sync':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Sync awards'
      tags:
        - 'Categories Awards'
  '/v1/categories/{category}/awards/toggle':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Toggle awards'
      tags:
        - 'Categories Awards'
  '/v1/categories/{category}/awards/{award}/pivot':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pivot:
                  type: object
                  description: 'Pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update pivot'
      tags:
        - 'Categories Awards'
  '/v1/categories/{category}/documents':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DocumentResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create document'
      tags:
        - 'Categories Documents'
    get:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of documents'
      tags:
        - 'Categories Documents'
  '/v1/categories/{category}/documents/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - image
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for documents'
      tags:
        - 'Categories Documents'
  '/v1/categories/{category}/documents/{document}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: document
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DocumentResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get document'
      tags:
        - 'Categories Documents'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: document
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DocumentResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update document'
      tags:
        - 'Categories Documents'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: document
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DocumentResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete document'
      tags:
        - 'Categories Documents'
  '/v1/categories/{category}/documents/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Document'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of documents'
      tags:
        - 'Categories Documents'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Document'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of documents'
      tags:
        - 'Categories Documents'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of documents'
      tags:
        - 'Categories Documents'
  '/v1/categories/{category}/documents/attach':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Attach documents'
      tags:
        - 'Categories Documents'
  '/v1/categories/{category}/documents/detach':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Detach documents'
      tags:
        - 'Categories Documents'
  '/v1/categories/{category}/documents/sync':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Sync documents'
      tags:
        - 'Categories Documents'
  '/v1/categories/{category}/documents/toggle':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Toggle documents'
      tags:
        - 'Categories Documents'
  '/v1/categories/{category}/documents/{document}/pivot':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: document
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pivot:
                  type: object
                  description: 'Pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update pivot'
      tags:
        - 'Categories Documents'
  '/v1/categories/{category}/forms':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FormResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create form'
      tags:
        - 'Categories Forms'
    get:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FormResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of forms'
      tags:
        - 'Categories Forms'
  '/v1/categories/{category}/forms/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scopes:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum:
                          - tags
                      parameters:
                        type: array
                        items:
                          type: string
                    required:
                      - name
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - slug
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, slug, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name, slug'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - fields
                          - submissions
                          - 'submissions.*'
                          - tags
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, slug, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, slug, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FormResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for forms'
      tags:
        - 'Categories Forms'
  '/v1/categories/{category}/forms/{form}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FormResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get form'
      tags:
        - 'Categories Forms'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FormResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update form'
      tags:
        - 'Categories Forms'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FormResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete form'
      tags:
        - 'Categories Forms'
  '/v1/categories/{category}/forms/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Form'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FormResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of forms'
      tags:
        - 'Categories Forms'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Form'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FormResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of forms'
      tags:
        - 'Categories Forms'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FormResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of forms'
      tags:
        - 'Categories Forms'
  '/v1/categories/{category}/forms/attach':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Attach forms'
      tags:
        - 'Categories Forms'
  '/v1/categories/{category}/forms/detach':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Detach forms'
      tags:
        - 'Categories Forms'
  '/v1/categories/{category}/forms/sync':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Sync forms'
      tags:
        - 'Categories Forms'
  '/v1/categories/{category}/forms/toggle':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Toggle forms'
      tags:
        - 'Categories Forms'
  '/v1/categories/{category}/forms/{form}/pivot':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: form
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - fields
              - submissions
              - 'submissions.*'
              - tags
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pivot:
                  type: object
                  description: 'Pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update pivot'
      tags:
        - 'Categories Forms'
  '/v1/categories/{category}/qualifications':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Qualification'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create qualification'
      tags:
        - 'Categories Qualifications'
    get:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of qualifications'
      tags:
        - 'Categories Qualifications'
  '/v1/categories/{category}/qualifications/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - image
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for qualifications'
      tags:
        - 'Categories Qualifications'
  '/v1/categories/{category}/qualifications/{qualification}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get qualification'
      tags:
        - 'Categories Qualifications'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Qualification'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update qualification'
      tags:
        - 'Categories Qualifications'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete qualification'
      tags:
        - 'Categories Qualifications'
  '/v1/categories/{category}/qualifications/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Qualification'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of qualifications'
      tags:
        - 'Categories Qualifications'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Qualification'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of qualifications'
      tags:
        - 'Categories Qualifications'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of qualifications'
      tags:
        - 'Categories Qualifications'
  '/v1/categories/{category}/qualifications/attach':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Attach qualifications'
      tags:
        - 'Categories Qualifications'
  '/v1/categories/{category}/qualifications/detach':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Detach qualifications'
      tags:
        - 'Categories Qualifications'
  '/v1/categories/{category}/qualifications/sync':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Sync qualifications'
      tags:
        - 'Categories Qualifications'
  '/v1/categories/{category}/qualifications/toggle':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Toggle qualifications'
      tags:
        - 'Categories Qualifications'
  '/v1/categories/{category}/qualifications/{qualification}/pivot':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pivot:
                  type: object
                  description: 'Pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update pivot'
      tags:
        - 'Categories Qualifications'
  '/v1/categories/{category}/ranks':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rank'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create rank'
      tags:
        - 'Categories Ranks'
    get:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of ranks'
      tags:
        - 'Categories Ranks'
  '/v1/categories/{category}/ranks/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - image
                      filters:
                        type: object
                        properties:
                          type: {}
                          items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string }, nested: { type: array, items: { type: object, properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } } } } } }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for ranks'
      tags:
        - 'Categories Ranks'
  '/v1/categories/{category}/ranks/{rank}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get rank'
      tags:
        - 'Categories Ranks'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update rank'
      tags:
        - 'Categories Ranks'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete rank'
      tags:
        - 'Categories Ranks'
  '/v1/categories/{category}/ranks/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of ranks'
      tags:
        - 'Categories Ranks'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Rank'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of ranks'
      tags:
        - 'Categories Ranks'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of ranks'
      tags:
        - 'Categories Ranks'
  '/v1/categories/{category}/ranks/attach':
    post:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Attach ranks'
      tags:
        - 'Categories Ranks'
  '/v1/categories/{category}/ranks/detach':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Detach ranks'
      tags:
        - 'Categories Ranks'
  '/v1/categories/{category}/ranks/sync':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Sync ranks'
      tags:
        - 'Categories Ranks'
  '/v1/categories/{category}/ranks/toggle':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    description: 'A key-value pairs, where keys are relation resource IDs and values are objects representing pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached:
                    type: array
                    items:
                      type: integer
                  detached:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Toggle ranks'
      tags:
        - 'Categories Ranks'
  '/v1/categories/{category}/ranks/{rank}/pivot':
    patch:
      parameters:
        -
          schema:
            type: integer
          name: category
          in: path
          required: true
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - image
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pivot:
                  type: object
                  description: 'Pivot fields'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      type: integer
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update pivot'
      tags:
        - 'Categories Ranks'
  /v1/documents:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DocumentResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create document'
      tags:
        - Documents
    get:
      parameters: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of documents'
      tags:
        - Documents
  /v1/documents/search:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scopes:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum:
                          - tags
                      parameters:
                        type: array
                        items:
                          type: string
                    required:
                      - name
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for documents'
      tags:
        - Documents
  '/v1/documents/{document}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: document
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DocumentResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get document'
      tags:
        - Documents
    patch:
      parameters:
        -
          schema:
            type: integer
          name: document
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DocumentResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update document'
      tags:
        - Documents
    delete:
      parameters:
        -
          schema:
            type: integer
          name: document
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DocumentResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete document'
      tags:
        - Documents
  /v1/documents/batch:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Document'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of documents'
      tags:
        - Documents
    patch:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Document'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of documents'
      tags:
        - Documents
    delete:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of documents'
      tags:
        - Documents
  /v1/assignment-records:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records assignment'
      tags:
        - 'Assignment Records'
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records assignments'
      tags:
        - 'Assignment Records'
  /v1/assignment-records/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - document
                          - position
                          - specialty
                          - status
                          - unit
                          - user
                      filters:
                        type: object
                        properties: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records assignments'
      tags:
        - 'Assignment Records'
  '/v1/assignment-records/{assignment_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: assignment_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records assignment'
      tags:
        - 'Assignment Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: assignment_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records assignment'
      tags:
        - 'Assignment Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: assignment_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssignmentRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records assignment'
      tags:
        - 'Assignment Records'
  /v1/assignment-records/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/AssignmentRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records assignments'
      tags:
        - 'Assignment Records'
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/AssignmentRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records assignments'
      tags:
        - 'Assignment Records'
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - position
              - specialty
              - status
              - unit
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignmentRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records assignments'
      tags:
        - 'Assignment Records'
  /v1/award-records:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwardRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records award'
      tags:
        - 'Award Records'
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records awards'
      tags:
        - 'Award Records'
  /v1/award-records/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - award
                          - award.image
                          - document
                          - user
                      filters:
                        type: object
                        properties: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records awards'
      tags:
        - 'Award Records'
  '/v1/award-records/{award_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: award_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records award'
      tags:
        - 'Award Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: award_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwardRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records award'
      tags:
        - 'Award Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: award_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AwardRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records award'
      tags:
        - 'Award Records'
  /v1/award-records/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/AwardRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records awards'
      tags:
        - 'Award Records'
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/AwardRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records awards'
      tags:
        - 'Award Records'
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - award
              - award.image
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AwardRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records awards'
      tags:
        - 'Award Records'
  /v1/combat-records:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombatRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records combat'
      tags:
        - 'Combat Records'
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records combat'
      tags:
        - 'Combat Records'
  /v1/combat-records/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - document
                          - user
                      filters:
                        type: object
                        properties: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records combat'
      tags:
        - 'Combat Records'
  '/v1/combat-records/{combat_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: combat_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records combat'
      tags:
        - 'Combat Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: combat_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CombatRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records combat'
      tags:
        - 'Combat Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: combat_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CombatRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records combat'
      tags:
        - 'Combat Records'
  /v1/combat-records/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/CombatRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records combat'
      tags:
        - 'Combat Records'
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/CombatRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records combat'
      tags:
        - 'Combat Records'
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CombatRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records combat'
      tags:
        - 'Combat Records'
  /v1/qualification-records:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QualificationRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records qualification'
      tags:
        - 'Qualification Records'
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records qualifications'
      tags:
        - 'Qualification Records'
  /v1/qualification-records/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - document
                          - qualification
                          - qualification.image
                          - user
                      filters:
                        type: object
                        properties: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records qualifications'
      tags:
        - 'Qualification Records'
  '/v1/qualification-records/{qualification_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: qualification_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records qualification'
      tags:
        - 'Qualification Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: qualification_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QualificationRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records qualification'
      tags:
        - 'Qualification Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: qualification_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/QualificationRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records qualification'
      tags:
        - 'Qualification Records'
  /v1/qualification-records/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/QualificationRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records qualifications'
      tags:
        - 'Qualification Records'
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/QualificationRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records qualifications'
      tags:
        - 'Qualification Records'
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - qualification
              - qualification.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QualificationRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records qualifications'
      tags:
        - 'Qualification Records'
  /v1/rank-records:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RankRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records rank'
      tags:
        - 'Rank Records'
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records ranks'
      tags:
        - 'Rank Records'
  /v1/rank-records/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - document
                          - rank
                          - rank.image
                          - user
                      filters:
                        type: object
                        properties: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records ranks'
      tags:
        - 'Rank Records'
  '/v1/rank-records/{rank_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: rank_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records rank'
      tags:
        - 'Rank Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: rank_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RankRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records rank'
      tags:
        - 'Rank Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: rank_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RankRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records rank'
      tags:
        - 'Rank Records'
  /v1/rank-records/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/RankRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records ranks'
      tags:
        - 'Rank Records'
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/RankRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records ranks'
      tags:
        - 'Rank Records'
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - rank
              - rank.image
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RankRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records ranks'
      tags:
        - 'Rank Records'
  /v1/service-records:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRecord'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create records service'
      tags:
        - 'Service Records'
    get:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of records service'
      tags:
        - 'Service Records'
  /v1/service-records/search:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                includes:
                  type: array
                  items:
                    type: object
                    properties:
                      relation:
                        type: string
                        enum:
                          - author
                          - document
                          - user
                      filters:
                        type: object
                        properties: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for records service'
      tags:
        - 'Service Records'
  '/v1/service-records/{service_record}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: service_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get records service'
      tags:
        - 'Service Records'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: service_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update records service'
      tags:
        - 'Service Records'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: service_record
          in: path
          required: true
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceRecordResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete records service'
      tags:
        - 'Service Records'
  /v1/service-records/batch:
    post:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/ServiceRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of records service'
      tags:
        - 'Service Records'
    patch:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/ServiceRecord'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of records service'
      tags:
        - 'Service Records'
    delete:
      parameters:
        -
          schema:
            type: string
            enum:
              - author
              - document
              - user
          name: include
          in: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRecordResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of records service'
      tags:
        - 'Service Records'
  '/v1/awards/{award}/image':
    post:
      parameters:
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create image'
      tags:
        - 'Awards Image'
  '/v1/awards/{award}/image/{image}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get image'
      tags:
        - 'Awards Image'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update image'
      tags:
        - 'Awards Image'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: award
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete image'
      tags:
        - 'Awards Image'
  '/v1/events/{event}/images':
    post:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create image'
      tags:
        - 'Events Images'
    get:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ImageResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Get a list of images'
      tags:
        - 'Events Images'
  '/v1/events/{event}/images/search':
    post:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - and
                          - or
                      field:
                        type: string
                        enum:
                          - id
                          - name
                          - created_at
                      operator:
                        type: string
                        enum:
                          - '<'
                          - '<='
                          - '>'
                          - '>='
                          - '='
                          - '!='
                          - like
                          - 'not like'
                          - ilike
                          - 'not ilike'
                          - in
                          - 'not in'
                          - 'all in'
                          - 'any in'
                      value:
                        type: string
                      nested:
                        type: array
                        items:
                          type: object
                          properties: { type: { type: string, enum: [and, or] }, field: { type: string, enum: [id, name, created_at] }, operator: { type: string, enum: ['<', '<=', '>', '>=', '=', '!=', like, 'not like', ilike, 'not ilike', in, 'not in', 'all in', 'any in'] }, value: { type: string } }
                search:
                  type: object
                  properties:
                    value:
                      type: string
                      description: 'A search for the given value will be performed on the following fields: name'
                    case_sensitive:
                      type: boolean
                      description: '(default: true) Set it to false to perform search in case-insensitive way'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ImageResource'
                  links:
                    $ref: '#/components/schemas/ResourceLinks'
                  meta:
                    $ref: '#/components/schemas/ResourceMeta'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
      summary: 'Search for images'
      tags:
        - 'Events Images'
  '/v1/events/{event}/images/{image}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get image'
      tags:
        - 'Events Images'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update image'
      tags:
        - 'Events Images'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete image'
      tags:
        - 'Events Images'
  '/v1/events/{event}/images/batch':
    post:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    $ref: '#/components/schemas/Image'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ImageResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Create a batch of images'
      tags:
        - 'Events Images'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: object
                  properties:
                    '{key}':
                      $ref: '#/components/schemas/Image'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ImageResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Update a batch of images'
      tags:
        - 'Events Images'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: integer
                    description: 'A list of resource IDs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ImageResource'
        422:
          description: 'Validation error'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete a batch of images'
      tags:
        - 'Events Images'
  '/v1/events/{event}/images/associate':
    post:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Associate image with event'
      tags:
        - 'Events Images'
  '/v1/events/{event}/images/{image}/dissociate':
    delete:
      parameters:
        -
          schema:
            type: integer
          name: event
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Dissociate image from event'
      tags:
        - 'Events Images'
  '/v1/qualifications/{qualification}/image':
    post:
      parameters:
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create image'
      tags:
        - 'Qualifications Image'
  '/v1/qualifications/{qualification}/image/{image}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get image'
      tags:
        - 'Qualifications Image'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update image'
      tags:
        - 'Qualifications Image'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: qualification
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete image'
      tags:
        - 'Qualifications Image'
  '/v1/ranks/{rank}/image':
    post:
      parameters:
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        422:
          description: 'Validation error'
      summary: 'Create image'
      tags:
        - 'Ranks Image'
  '/v1/ranks/{rank}/image/{image}':
    get:
      parameters:
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Get image'
      tags:
        - 'Ranks Image'
    patch:
      parameters:
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
        422:
          description: 'Validation error'
      summary: 'Update image'
      tags:
        - 'Ranks Image'
    delete:
      parameters:
        -
          schema:
            type: integer
          name: rank
          in: path
          required: true
        -
          schema:
            type: integer
          name: image
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageResource'
        401:
          description: Unauthenticated
        403:
          description: Unauthorized
        404:
          description: 'Resource not found'
      summary: 'Delete image'
      tags:
        - 'Ranks Image'
components:
  securitySchemes:
    ApiKey:
      type: http
      scheme: bearer
      description: 'A valid API key that can be created in your PERSCOM.io dashboard.'
    PerscomId:
      type: apiKey
      in: header
      name: X-Perscom-Id
      description: 'Your PERSCOM ID that can be obtained from your PERSCOM.io dashboard.'
  schemas:
    User:
      title: User
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        email_verified_at:
          type: string
          nullable: true
          format: date-time
        position_id:
          type: integer
          nullable: true
        rank_id:
          type: integer
          nullable: true
        specialty_id:
          type: integer
          nullable: true
        status_id:
          type: integer
          nullable: true
        unit_id:
          type: integer
          nullable: true
        password:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        notes_updated_at:
          type: string
          nullable: true
          format: date-time
        profile_photo:
          type: string
          nullable: true
        cover_photo:
          type: string
          nullable: true
        social_id:
          type: string
          nullable: true
        social_driver:
          type: string
          nullable: true
        social_token:
          type: string
          nullable: true
        social_refresh_token:
          type: string
          nullable: true
        last_seen_at:
          type: string
          nullable: true
          format: date-time
        approved:
          type: boolean
    UserResource:
      title: UserResource
      allOf:
        -
          $ref: '#/components/schemas/User'
        -
          type: object
          properties:
            id:
              type: integer
            remember_token:
              type: string
              nullable: true
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
            approved:
              type: boolean
            data:
              type: object
              additionalProperties: true
    Announcement:
      title: Announcement
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        color:
          type: string
        expires_at:
          type: string
          nullable: true
          format: date-time
    AnnouncementResource:
      title: AnnouncementResource
      allOf:
        -
          $ref: '#/components/schemas/Announcement'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Award:
      title: Award
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        order:
          type: integer
    AwardResource:
      title: AwardResource
      allOf:
        -
          $ref: '#/components/schemas/Award'
        -
          type: object
          properties:
            id:
              type: integer
            order:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Qualification:
      title: Qualification
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        order:
          type: integer
    QualificationResource:
      title: QualificationResource
      allOf:
        -
          $ref: '#/components/schemas/Qualification'
        -
          type: object
          properties:
            id:
              type: integer
            order:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Rank:
      title: Rank
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        abbreviation:
          type: string
          nullable: true
        paygrade:
          type: string
          nullable: true
        order:
          type: integer
    RankResource:
      title: RankResource
      allOf:
        -
          $ref: '#/components/schemas/Rank'
        -
          type: object
          properties:
            id:
              type: integer
            order:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Unit:
      title: Unit
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        order:
          type: integer
    UnitResource:
      title: UnitResource
      allOf:
        -
          $ref: '#/components/schemas/Unit'
        -
          type: object
          properties:
            id:
              type: integer
            order:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Submission:
      title: Submission
      type: object
      properties:
        form_id:
          type: integer
        user_id:
          type: integer
          nullable: true
        data:
          type: object
          additionalProperties: true
    SubmissionResource:
      title: SubmissionResource
      allOf:
        -
          $ref: '#/components/schemas/Submission'
        -
          type: object
          properties:
            id:
              type: integer
            data:
              type: object
              additionalProperties: true
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    AssignmentRecord:
      title: AssignmentRecord
      type: object
      properties:
        user_id:
          type: integer
          nullable: true
        unit_id:
          type: integer
          nullable: true
        position_id:
          type: integer
          nullable: true
        specialty_id:
          type: integer
          nullable: true
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
          nullable: true
        secondary_unit_ids:
          type: object
          additionalProperties: true
        secondary_position_ids:
          type: object
          additionalProperties: true
        secondary_specialty_ids:
          type: object
          additionalProperties: true
        status_id:
          type: integer
          nullable: true
    AssignmentRecordResource:
      title: AssignmentRecordResource
      allOf:
        -
          $ref: '#/components/schemas/AssignmentRecord'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    AwardRecord:
      title: AwardRecord
      type: object
      properties:
        user_id:
          type: integer
          nullable: true
        award_id:
          type: integer
          nullable: true
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
          nullable: true
    AwardRecordResource:
      title: AwardRecordResource
      allOf:
        -
          $ref: '#/components/schemas/AwardRecord'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    CombatRecord:
      title: CombatRecord
      type: object
      properties:
        user_id:
          type: integer
          nullable: true
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
    CombatRecordResource:
      title: CombatRecordResource
      allOf:
        -
          $ref: '#/components/schemas/CombatRecord'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    QualificationRecord:
      title: QualificationRecord
      type: object
      properties:
        user_id:
          type: integer
          nullable: true
        qualification_id:
          type: integer
          nullable: true
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
          nullable: true
    QualificationRecordResource:
      title: QualificationRecordResource
      allOf:
        -
          $ref: '#/components/schemas/QualificationRecord'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    RankRecord:
      title: RankRecord
      type: object
      properties:
        user_id:
          type: integer
          nullable: true
        rank_id:
          type: integer
          nullable: true
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
          nullable: true
        type:
          type: integer
    RankRecordResource:
      title: RankRecordResource
      allOf:
        -
          $ref: '#/components/schemas/RankRecord'
        -
          type: object
          properties:
            id:
              type: integer
            type:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    ServiceRecord:
      title: ServiceRecord
      type: object
      properties:
        user_id:
          type: integer
          nullable: true
        document_id:
          type: integer
          nullable: true
        author_id:
          type: integer
          nullable: true
        text:
          type: string
    ServiceRecordResource:
      title: ServiceRecordResource
      allOf:
        -
          $ref: '#/components/schemas/ServiceRecord'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Position:
      title: Position
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        order:
          type: integer
    PositionResource:
      title: PositionResource
      allOf:
        -
          $ref: '#/components/schemas/Position'
        -
          type: object
          properties:
            id:
              type: integer
            order:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Specialty:
      title: Specialty
      type: object
      properties:
        name:
          type: string
        abbreviation:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        order:
          type: integer
    SpecialtyResource:
      title: SpecialtyResource
      allOf:
        -
          $ref: '#/components/schemas/Specialty'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
            order:
              type: integer
    Status:
      title: Status
      type: object
      properties:
        name:
          type: string
        color:
          type: string
        text_color:
          type: string
          nullable: true
        bg_color:
          type: string
          nullable: true
    StatusResource:
      title: StatusResource
      allOf:
        -
          $ref: '#/components/schemas/Status'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    ResourceLinks:
      title: ResourceLinks
      type: object
      properties:
        first:
          type: string
          format: uri
        last:
          type: string
          format: uri
        prev:
          type: string
          format: uri
        next:
          type: string
          format: uri
    ResourceMeta:
      title: ResourceMeta
      type: object
      properties:
        current_page:
          type: integer
        from:
          type: integer
        last_page:
          type: integer
        path:
          type: string
        per_page:
          type: integer
        to:
          type: integer
        total:
          type: integer
    Calendar:
      title: Calendar
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
    CalendarResource:
      title: CalendarResource
      allOf:
        -
          $ref: '#/components/schemas/Calendar'
        -
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            description:
              type: string
              nullable: true
            color:
              type: string
              nullable: true
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Event:
      title: Event
      type: object
      properties:
        name:
          type: string
        calendar_id:
          type: integer
          nullable: true
        description:
          type: string
          nullable: true
        content:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        author_id:
          type: integer
          nullable: true
        all_day:
          type: boolean
        start:
          type: string
          format: date-time
        end:
          type: string
          nullable: true
          format: date-time
        repeats:
          type: boolean
        frequency:
          type: string
          nullable: true
        interval:
          type: integer
        end_type:
          type: string
          nullable: true
        count:
          type: integer
          nullable: true
        until:
          type: string
          nullable: true
          format: date-time
        by_day:
          type: object
          additionalProperties: true
        by_month:
          type: object
          additionalProperties: true
        by_month_day:
          type: object
          additionalProperties: true
        rrule:
          type: string
          nullable: true
    EventResource:
      title: EventResource
      allOf:
        -
          $ref: '#/components/schemas/Event'
        -
          type: object
          properties:
            id:
              type: integer
            by_set_position:
              type: object
              additionalProperties: true
            by_year_day:
              type: object
              additionalProperties: true
            registration_enabled:
              type: boolean
            registration_deadline:
              type: string
              nullable: true
              format: date-time
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Form:
      title: Form
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        success_message:
          type: string
          nullable: true
        is_public:
          type: boolean
        description:
          type: string
          nullable: true
        instructions:
          type: string
          nullable: true
    FormResource:
      title: FormResource
      allOf:
        -
          $ref: '#/components/schemas/Form'
        -
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            slug:
              type: string
            success_message:
              type: string
              nullable: true
            is_public:
              type: boolean
            description:
              type: string
              nullable: true
            instructions:
              type: string
              nullable: true
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
            submission_status_id:
              type: integer
              nullable: true
    Field:
      title: Field
      type: object
      properties: {}
    FieldResource:
      title: FieldResource
      allOf:
        -
          $ref: '#/components/schemas/Field'
        -
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            key:
              type: string
              nullable: true
            type:
              type: string
            nova_type:
              type: string
              nullable: true
            cast:
              type: string
              nullable: true
            description:
              type: string
              nullable: true
            placeholder:
              type: string
              nullable: true
            default:
              type: string
              nullable: true
            help:
              type: string
              nullable: true
            required:
              type: boolean
            rules:
              type: string
              nullable: true
            readonly:
              type: boolean
            options:
              type: object
              additionalProperties: true
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
            hidden:
              type: boolean
    NewsfeedItem:
      title: NewsfeedItem
      type: object
      properties:
        log_name:
          type: string
          nullable: true
        description:
          type: string
        subject_type:
          type: string
          nullable: true
        event:
          type: string
          nullable: true
        subject_id:
          type: integer
          nullable: true
        causer_type:
          type: string
          nullable: true
        causer_id:
          type: string
          nullable: true
        properties:
          type: object
          additionalProperties: true
        batch_uuid:
          type: string
          nullable: true
    NewsfeedItemResource:
      title: NewsfeedItemResource
      allOf:
        -
          $ref: '#/components/schemas/NewsfeedItem'
        -
          type: object
          properties: {}
    Group:
      title: Group
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        order:
          type: integer
    GroupResource:
      title: GroupResource
      allOf:
        -
          $ref: '#/components/schemas/Group'
        -
          type: object
          properties:
            id:
              type: integer
            order:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Task:
      title: Task
      type: object
      properties:
        title:
          type: string
        description:
          type: string
          nullable: true
        instructions:
          type: string
          nullable: true
        form_id:
          type: integer
          nullable: true
    TaskResource:
      title: TaskResource
      allOf:
        -
          $ref: '#/components/schemas/Task'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Category:
      title: Category
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        resource:
          type: string
    CategoryResource:
      title: CategoryResource
      allOf:
        -
          $ref: '#/components/schemas/Category'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Document:
      title: Document
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        content:
          type: string
    DocumentResource:
      title: DocumentResource
      allOf:
        -
          $ref: '#/components/schemas/Document'
        -
          type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Image:
      title: Image
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        filename:
          type: string
        path:
          type: string
    ImageResource:
      title: ImageResource
      allOf:
        -
          $ref: '#/components/schemas/Image'
        -
          type: object
          properties:
            id:
              type: integer
            model_type:
              type: string
            model_id:
              type: string
            created_at:
              type: string
              nullable: true
              format: date-time
            updated_at:
              type: string
              nullable: true
              format: date-time
    Newsfeed:
      title: Newsfeed
      type: object
      properties:
        log_name:
          type: string
          nullable: true
        description:
          type: string
        subject_type:
          type: string
          nullable: true
        event:
          type: string
          nullable: true
        subject_id:
          type: integer
          nullable: true
        causer_type:
          type: string
          nullable: true
        causer_id:
          type: string
          nullable: true
        properties:
          type: object
          additionalProperties: true
        batch_uuid:
          type: string
          nullable: true
    NewsfeedResource:
      title: NewsfeedResource
      allOf:
        -
          $ref: '#/components/schemas/Newsfeed'
        -
          type: object
          properties: {}
tags:
  -
    name: Me
    description: 'API documentation for the Current User'
  -
    name: Announcements
    description: 'API documentation for Announcements'
  -
    name: 'Assignment Records'
    description: 'API documentation for Assignment Records'
  -
    name: Awards
    description: 'API documentation for Awards'
  -
    name: 'Awards Image'
    description: 'API documentation for Awards Image'
  -
    name: 'Award Records'
    description: 'API documentation for Award Records'
  -
    name: Calendars
    description: 'API documentation for Calendars'
  -
    name: Categories
    description: 'API documentation for Categories'
  -
    name: 'Categories Awards'
    description: 'API documentation for Categories Awards'
  -
    name: 'Categories Documents'
    description: 'API documentation for Categories Documents'
  -
    name: 'Categories Forms'
    description: 'API documentation for Categories Forms'
  -
    name: 'Categories Qualifications'
    description: 'API documentation for Categories Qualifications'
  -
    name: 'Categories Ranks'
    description: 'API documentation for Categories Ranks'
  -
    name: 'Combat Records'
    description: 'API documentation for Combat Records'
  -
    name: Documents
    description: 'API documentation for Documents'
  -
    name: Events
    description: 'API documentation for Events'
  -
    name: 'Events Images'
    description: 'API documentation for Events Images'
  -
    name: Forms
    description: 'API documentation for Forms'
  -
    name: 'Forms Submissions'
    description: 'API documentation for Forms Submissions'
  -
    name: Groups
    description: 'API documentation for Groups'
  -
    name: Newsfeed
    description: 'API documentation for Newsfeed'
  -
    name: 'Newsfeed Likes'
    description: 'API documentation for Newsfeed Likes'
  -
    name: Positions
    description: 'API documentation for Positions'
  -
    name: Qualifications
    description: 'API documentation for Qualifications'
  -
    name: 'Qualifications Image'
    description: 'API documentation for Qualifications Image'
  -
    name: 'Qualification Records'
    description: 'API documentation for Qualification Records'
  -
    name: Ranks
    description: 'API documentation for Ranks'
  -
    name: 'Ranks Image'
    description: 'API documentation for Ranks Image'
  -
    name: 'Rank Records'
    description: 'API documentation for Rank Records'
  -
    name: 'Service Records'
    description: 'API documentation for Service Records'
  -
    name: Specialties
    description: 'API documentation for Specialties'
  -
    name: Statuses
    description: 'API documentation for Statuses'
  -
    name: Submissions
    description: 'API documentation for Submissions'
  -
    name: Tasks
    description: 'API documentation for Tasks'
  -
    name: Units
    description: 'API documentation for Units'
  -
    name: Users
    description: 'API documentation for Users'
  -
    name: 'Users Assignment Records'
    description: 'API documentation for Users Assignment Records'
  -
    name: 'Users Award Records'
    description: 'API documentation for Users Award Records'
  -
    name: 'Users Combat Records'
    description: 'API documentation for Users Combat Records'
  -
    name: 'Users Qualification Records'
    description: 'API documentation for Users Qualification Records'
  -
    name: 'Users Rank Records'
    description: 'API documentation for Users Rank Records'
  -
    name: 'Users Service Records'
    description: 'API documentation for Users Service Records'
  -
    name: 'Users Position'
    description: 'API documentation for Users Position'
  -
    name: 'Users Rank'
    description: 'API documentation for Users Rank'
  -
    name: 'Users Specialty'
    description: 'API documentation for Users Specialty'
  -
    name: 'Users Unit'
    description: 'API documentation for Users Unit'
  -
    name: 'Users Status'
    description: 'API documentation for Users Status'
  -
    name: 'Users Secondary Positions'
    description: 'API documentation for Users Secondary Positions'
  -
    name: 'Users Secondary Specialties'
    description: 'API documentation for Users Secondary Specialties'
  -
    name: 'Users Secondary Units'
    description: 'API documentation for Users Secondary Units'
  -
    name: 'Users Fields'
    description: 'API documentation for Users Fields'
